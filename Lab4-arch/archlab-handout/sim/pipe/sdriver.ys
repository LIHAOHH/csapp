#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0; dengyu=0meisuan
	iaddq $-9,%rdx
	jl   L
Loop1: 	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 24(%rdi), %r11			
	mrmovq 32(%rdi), %r12
	mrmovq 16(%rdi), %r10
	
	andq %r8, %r8	
	rmmovq %r12, 32(%rsi)	
	jle Npos1			
	iaddq $1, %rax		
Npos1:	
	andq %r9, %r9		
	rmmovq %r11, 24(%rsi)	
	jle Npos2			
	iaddq $1, %rax		
Npos2:		
	andq %r10, %r10		
	rmmovq %r9, 8(%rsi)	
	jle Npos3			
	iaddq $1, %rax		
Npos3:	
	andq %r11, %r11		
	rmmovq %r10, 16(%rsi)	
	jle Npos4			
	iaddq $1, %rax		
Npos4:	
	andq %r12, %r12	
	rmmovq %r8, (%rsi)	
	jle Npos5			
	iaddq $1, %rax		
Npos5:	
	mrmovq 40(%rdi), %r8		
	mrmovq 48(%rdi), %r9
	mrmovq 56(%rdi), %r10	
	mrmovq 64(%rdi), %r11
	andq %r8, %r8	
	rmmovq %r8, 40(%rsi)	
	jle Npos6			
	iaddq $1, %rax		
Npos6:	
	andq %r9, %r9	
	rmmovq %r9, 48(%rsi)	
	jle Npos7			
	iaddq $1, %rax		
Npos7:	
	andq %r10, %r10		
	rmmovq %r10, 56(%rsi)	
	jle Npos8			
	iaddq $1, %rax		
Npos8:	
	andq %r11, %r11		
	rmmovq %r11, 64(%rsi)	
	jle Npos9			
	iaddq $1, %rax		
Npos9:	
	iaddq $72,%rdi
	iaddq $72,%rsi
	iaddq $-9,%rdx
	jge   Loop1


L:
	iaddq  $9,%rdx
	iaddq  $-5,%rdx
	jl   L1
 	mrmovq (%rdi), %r8		
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11			
	mrmovq 32(%rdi), %r12

	andq %r8, %r8		
	rmmovq %r8, (%rsi)	
	jle Nposa			
	iaddq $1, %rax		
Nposa:	
	andq %r9, %r9	
	rmmovq %r9, 8(%rsi)	
	jle Nposb			
	iaddq $1, %rax		
Nposb:		
	andq %r10, %r10		
	rmmovq %r10, 16(%rsi)	
	jle Nposc			
	iaddq $1, %rax		
Nposc:	
	andq %r11, %r11		
	rmmovq %r11, 24(%rsi)	
	jle Nposd			
	iaddq $1, %rax		
Nposd:	
	andq %r12, %r12		
	rmmovq %r12, 32(%rsi)	
	jle Npose			
	iaddq $1, %rax		
Npose:				
	iaddq $40,%rdi
	iaddq $40,%rsi	
	andq  %rdx,%rdx
	
	jg   L2
	ret

L1:	     
	iaddq $5,%rdx
	mrmovq (%rdi), %r8
	je Done
L2:	
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	rmmovq %r8, (%rsi)
	andq %r8, %r8		
	jle Npos11			
	iaddq $1, %rax		
Npos11:	
	iaddq $-1,%rdx

	je  Done
	
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		
	jle Npos12			
	iaddq $1, %rax		
Npos12:	
	iaddq $-1,%rdx
	je  Done
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r8
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10		
	jle Npos13			
	iaddq $1, %rax		
Npos13:	
	iaddq $-1,%rdx
	je  Done
	
	rmmovq %r8, 24(%rsi)
	andq %r8, %r8		
	jle Npos14			
	iaddq $1, %rax		
Npos14:	
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
